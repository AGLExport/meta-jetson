From e6bf5157568435d175273ed9b2ece0bcc80e102a Mon Sep 17 00:00:00 2001
From: wata2ki <wata2ki@gmail.com>
Date: Wed, 13 Apr 2016 23:23:17 +0900
Subject: [PATCH 2/4] compositor-drm: Add new gbm struct to allow for a
 separate gbm device.

---
 src/compositor-drm.c | 45 ++++++++++++++++++++++++++-------------------
 1 file changed, 26 insertions(+), 19 deletions(-)
 mode change 100644 => 100755 src/compositor-drm.c

diff --git a/src/compositor-drm.c b/src/compositor-drm.c
old mode 100644
new mode 100755
index 6777bf8..15ded72
--- a/src/compositor-drm.c
+++ b/src/compositor-drm.c
@@ -100,7 +100,11 @@ struct drm_backend {
 		int fd;
 		char *filename;
 	} drm;
-	struct gbm_device *gbm;
+	struct {
+		int fd;
+		char *filename;
+	} gbm;
+	struct gbm_device *gbm_device;
 	uint32_t *crtcs;
 	int num_crtcs;
 	uint32_t crtc_allocator;
@@ -486,7 +490,7 @@ drm_output_prepare_scanout_view(struct drm_output *output,
 
 	if (ev->geometry.x != output->base.x ||
 	    ev->geometry.y != output->base.y ||
-	    buffer == NULL || b->gbm == NULL ||
+	    buffer == NULL || b->gbm_device == NULL ||
 	    buffer->width != output->base.current_mode->width ||
 	    buffer->height != output->base.current_mode->height ||
 	    output->base.transform != viewport->buffer.transform ||
@@ -496,7 +500,7 @@ drm_output_prepare_scanout_view(struct drm_output *output,
 	if (ev->geometry.scissor_enabled)
 		return NULL;
 
-	bo = gbm_bo_import(b->gbm, GBM_BO_IMPORT_WL_BUFFER,
+	bo = gbm_bo_import(b->gbm_device, GBM_BO_IMPORT_WL_BUFFER,
 			   buffer->resource, GBM_BO_USE_SCANOUT);
 
 	/* Unable to use the buffer for scanout */
@@ -931,7 +935,7 @@ drm_output_prepare_overlay_view(struct drm_output *output,
 	uint32_t format;
 	wl_fixed_t sx1, sy1, sx2, sy2;
 
-	if (b->gbm == NULL)
+	if (b->gbm_device == NULL)
 		return NULL;
 
 	if (viewport->buffer.transform != output->base.transform)
@@ -993,13 +997,13 @@ drm_output_prepare_overlay_view(struct drm_output *output,
 		if (dmabuf->n_planes != 1 || dmabuf->offset[0] != 0)
 			return NULL;
 
-		bo = gbm_bo_import(b->gbm, GBM_BO_IMPORT_FD, &gbm_dmabuf,
+		bo = gbm_bo_import(b->gbm_device, GBM_BO_IMPORT_FD, &gbm_dmabuf,
 				   GBM_BO_USE_SCANOUT);
 #else
 		return NULL;
 #endif
 	} else {
-		bo = gbm_bo_import(b->gbm, GBM_BO_IMPORT_WL_BUFFER,
+		bo = gbm_bo_import(b->gbm_device, GBM_BO_IMPORT_WL_BUFFER,
 				   buffer_resource, GBM_BO_USE_SCANOUT);
 	}
 	if (!bo)
@@ -1095,7 +1099,7 @@ drm_output_prepare_cursor_view(struct drm_output *output,
 		(struct drm_backend *)output->base.compositor->backend;
 	struct weston_buffer_viewport *viewport = &ev->surface->buffer_viewport;
 
-	if (b->gbm == NULL)
+	if (b->gbm_device == NULL)
 		return NULL;
 	if (output->base.transform != WL_OUTPUT_TRANSFORM_NORMAL)
 		return NULL;
@@ -1483,6 +1487,9 @@ init_drm(struct drm_backend *b, struct udev_device *device)
 	b->drm.fd = fd;
 	b->drm.filename = strdup(filename);
 
+	b->gbm.fd = fd;
+	b->gbm.filename = b->drm.filename;
+
 	ret = drmGetCap(fd, DRM_CAP_TIMESTAMP_MONOTONIC, &cap);
 	if (ret == 0 && cap == 1)
 		clk_id = CLOCK_MONOTONIC;
@@ -1568,7 +1575,7 @@ drm_backend_create_gl_renderer(struct drm_backend *b)
 		n_formats = 2;
 	if (gl_renderer->create(b->compositor,
 				EGL_PLATFORM_GBM_KHR,
-				(void *)b->gbm,
+				(void *)b->gbm_device,
 				gl_renderer->opaque_attribs,
 				format,
 				n_formats) < 0) {
@@ -1581,13 +1588,13 @@ drm_backend_create_gl_renderer(struct drm_backend *b)
 static int
 init_egl(struct drm_backend *b)
 {
-	b->gbm = create_gbm_device(b->drm.fd);
+	b->gbm_device = create_gbm_device(b->gbm.fd);
 
-	if (!b->gbm)
+	if (!b->gbm_device)
 		return -1;
 
 	if (drm_backend_create_gl_renderer(b) < 0) {
-		gbm_device_destroy(b->gbm);
+		gbm_device_destroy(b->gbm_device);
 		return -1;
 	}
 
@@ -1820,7 +1827,7 @@ drm_output_init_egl(struct drm_output *output, struct drm_backend *b)
 	};
 	int i, flags, n_formats = 1;
 
-	output->surface = gbm_surface_create(b->gbm,
+	output->surface = gbm_surface_create(b->gbm_device,
 					     output->base.current_mode->width,
 					     output->base.current_mode->height,
 					     format[0],
@@ -1851,7 +1858,7 @@ drm_output_init_egl(struct drm_output *output, struct drm_backend *b)
 			continue;
 
 		output->cursor_bo[i] =
-			gbm_bo_create(b->gbm, b->cursor_width, b->cursor_height,
+			gbm_bo_create(b->gbm_device, b->cursor_width, b->cursor_height,
 				GBM_FORMAT_ARGB8888, flags);
 	}
 
@@ -2714,8 +2721,8 @@ drm_destroy(struct weston_compositor *ec)
 
 	weston_compositor_shutdown(ec);
 
-	if (b->gbm)
-		gbm_device_destroy(b->gbm);
+	if (b->gbm_device)
+		gbm_device_destroy(b->gbm_device);
 
 	weston_launcher_destroy(ec->launcher);
 
@@ -3010,8 +3017,8 @@ switch_to_gl_renderer(struct drm_backend *b)
 
 	weston_log("Switching to GL renderer\n");
 
-	b->gbm = create_gbm_device(b->drm.fd);
-	if (!b->gbm) {
+	b->gbm_device = create_gbm_device(b->drm.fd);
+	if (!b->gbm_device) {
 		weston_log("Failed to create gbm device. "
 			   "Aborting renderer switch\n");
 		return;
@@ -3023,7 +3030,7 @@ switch_to_gl_renderer(struct drm_backend *b)
 	b->compositor->renderer->destroy(b->compositor);
 
 	if (drm_backend_create_gl_renderer(b) < 0) {
-		gbm_device_destroy(b->gbm);
+		gbm_device_destroy(b->gbm_device);
 		weston_log("Failed to create GL renderer. Quitting.\n");
 		/* FIXME: we need a function to shutdown cleanly */
 		assert(0);
@@ -3217,7 +3224,7 @@ err_drm_source:
 err_udev_input:
 	udev_input_destroy(&b->input);
 err_sprite:
-	gbm_device_destroy(b->gbm);
+	gbm_device_destroy(b->gbm_device);
 	destroy_sprites(b);
 err_udev_dev:
 	udev_device_unref(drm_device);
-- 
1.9.1

